// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Staff {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String? // Optional
  phone     String? // Optional
  role      String
  salary    Int
  code      String
  isActive  Boolean @default(true)

  ship   Ship?   @relation(fields: [shipId], references: [id])
  shipId String? // Optional

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([code, email, phone])
  @@map("staff")
}

model Ship {
  id     String @id @default(cuid())
  name   String @unique
  status String

  staff    Staff[]
  schedule Schedule[]

  @@map("ship")
}

model Schedule {
  id          String   @id @default(cuid())
  description String?
  start       DateTime
  finish      DateTime
  embark      String
  desembark   String

  ship   Ship?   @relation(fields: [shipId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  shipId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("schedule")
}
